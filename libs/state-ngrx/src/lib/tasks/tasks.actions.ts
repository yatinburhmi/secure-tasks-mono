import { createAction, props } from '@ngrx/store';
import { TaskDto } from '@secure-tasks-mono/data';
import { Update } from '@ngrx/entity'; // For partial updates

export const tasksFeatureKey = 'tasks';

// Load Tasks Actions
export const loadTasks = createAction(
  '[Tasks API] Load Tasks'
  // props<{ params?: any }>() // Optional: if you need to pass query params for loading
);

export const loadTasksSuccess = createAction(
  '[Tasks API] Load Tasks Success',
  props<{ tasks: TaskDto[] }>()
);

export const loadTasksFailure = createAction(
  '[Tasks API] Load Tasks Failure',
  props<{ error: any }>()
);

// Add Task Actions
export const addTask = createAction(
  '[Tasks Page] Add Task',
  props<{ task: Omit<TaskDto, 'id'> }>() // Assuming ID is generated by the backend
);

export const addTaskSuccess = createAction(
  '[Tasks API] Add Task Success',
  props<{ task: TaskDto }>()
);

export const addTaskFailure = createAction(
  '[Tasks API] Add Task Failure',
  props<{ error: any }>()
);

// Update Task Actions
export const updateTask = createAction(
  '[Tasks Page] Update Task',
  props<{ task: Update<TaskDto> }>() // Using NgRx Entity Update type for partial updates
);

export const updateTaskSuccess = createAction(
  '[Tasks API] Update Task Success',
  props<{ task: Update<TaskDto> }>() // Backend might return the updated task or just a success status
);

export const updateTaskFailure = createAction(
  '[Tasks API] Update Task Failure',
  props<{ error: any }>()
);

// Delete Task Actions
export const deleteTask = createAction(
  '[Tasks Page] Delete Task',
  props<{ id: string }>() // Changed to string
);

export const deleteTaskSuccess = createAction(
  '[Tasks API] Delete Task Success',
  props<{ id: string }>() // Changed to string
);

export const deleteTaskFailure = createAction(
  '[Tasks API] Delete Task Failure',
  props<{ error: any }>()
);
